<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2016 Project Vision Inc.
 All Rights Reserved

 This software contains the intellectual property of Project Vision Inc.
 or is licensed to Project Vision Inc. from third parties. Use of this
 software and the intellectual property contained therein is expressly limited
 to the terms and conditions of the License Agreement under which it is
 provided by or on behalf of Project Vision Inc.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc     http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

  <!-- Common Application Configuration from the common project -->
  <import resource="classpath:spring/common-app-config.xml"/>

  <context:annotation-config />
  <context:component-scan base-package="com.projectvision.healthapp.mainlayer" />

  <mvc:resources mapping="/resources/**" location="/resources/" />
  <mvc:annotation-driven>
    <mvc:message-converters>
      <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="objectMapper" ref="customObjectMapper" />
      </bean>
    </mvc:message-converters>
  </mvc:annotation-driven>
  <mvc:default-servlet-handler/>
    <mvc:interceptors>
    <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
      <property name="paramName" value="lang"/>
    </bean>
  </mvc:interceptors>

  <context:property-placeholder location="classpath:mainlayerOverride.properties" order="-1"
                                ignore-unresolvable="true" ignore-resource-not-found="true" />
  <context:property-placeholder location="classpath:mainlayer.properties"/>

  <bean id="serverUrl" class="java.lang.String">
    <constructor-arg value="${server.url}" />
  </bean>
  <bean id="datalayerUrl" class="java.lang.String">
    <constructor-arg value="${datalayer.url}" />
  </bean>
  <bean id="hashAlgorithmName" class="java.lang.String">
    <constructor-arg value="${auth.hashAlgorithmName}" />
  </bean>
  <bean id="hashIterations" class="java.lang.Integer">
    <constructor-arg value="${auth.hashIterations}" />
  </bean>

  <bean id="connectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager">
    <property name="maxTotal" value="${httpclient.pool.maxTotalConnection}"/>
    <property name="defaultMaxPerRoute" value="${httpclient.pool.defaultMaxPerRouteConnection}" />
  </bean>

  <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig" factory-method="custom">
    <property name="socketTimeout" value="${httpclient.socketTimeoutInMillis}" />
    <property name="connectTimeout" value="${httpclient.connectionTimeoutInMillis}" />
  </bean>

  <bean id="requestConfig" factory-bean="requestConfigBuilder" factory-method="build" />

  <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create">
    <property name="defaultRequestConfig" ref="requestConfig" />
    <property name="connectionManager" ref="connectionManager" />
  </bean>

  <bean id="httpClient" factory-bean="httpClientBuilder" factory-method="build" />

  <bean id="clientRequestFactory" class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
    <constructor-arg ref="httpClient" />
  </bean>

  <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
    <constructor-arg ref="clientRequestFactory" />
    <property name="errorHandler">
      <bean class="com.projectvision.healthapp.util.DatalayerErrorResponseHandler" />
    </property>
  </bean>

  <!-- All Apache Shiro related configuration follows -->
  <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

  <bean id="credMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    <property name="hashAlgorithmName" ref="hashAlgorithmName" />
    <property name="hashIterations" ref="hashIterations" />
  </bean>

  <bean id="authRealm" class="com.projectvision.healthapp.mainlayer.auth.AuthorizingRealmImpl">
    <property name="name" value="ProjectVision HealthApp"/>
    <property name="credentialsMatcher" ref="credMatcher"/>
  </bean>

  <!--  We could change this later to Ehcache based implementation or some other better distributed cache manager -->
  <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />

  <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    <property name="deleteInvalidSessions" value="true"/>
    <property name="globalSessionTimeout" value="${auth.sessionTimeout}"/>
  </bean>

  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <property name="realm" ref="authRealm"/>
    <property name="sessionManager" ref="sessionManager"/>
    <property name="cacheManager" ref="cacheManager" />
  </bean>

  <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
  <!-- the lifecycleBeanProcessor has run: -->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor"/>

  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager"/>
  </bean>

  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager"/>
    <property name="successUrl" value="/"/>
    <property name="loginUrl" value="/v1/unauthenticated" />
    <property name="unauthorizedUrl" value="/v1/unauthorized"/>
    <property name="filterChainDefinitions">
      <value>
        /admin/** = authc, roles[root]
        /v1/login = anon
        /v1/logout = anon
        /v1/mobileAppForgotPassword = anon
        /v1/initiateResetPassword = anon
        /v1/resetPassword = anon
        /v1/registerClinician = anon
        /v1/registerPatient = anon
        /clinician/** = anon
        /swagger-ui** = authcBasic
        /** = authc
      </value>
    </property>
  </bean>

  <bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="${smtp.host}" />
    <property name="username" value="${smtp.user}" />
    <property name="password" value="${smtp.pass}" />
    <property name="javaMailProperties">
      <props>
        <prop key="mail.smtp.auth">true</prop>
        <prop key="mail.smtp.socketFactory.port">${smtp.socketFactory.port}</prop>
        <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
        <prop key="mail.smtp.port">${smtp.port}</prop>
      </props>
    </property>
  </bean>

  <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
    <property name="velocityProperties">
      <value>
        resource.loader=classpath
        classpath.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
      </value>
    </property>
  </bean>

  <bean id="mailFrom" class="java.lang.String">
    <constructor-arg value="${smtp.mailFrom}"/>
  </bean>

  <bean id="codeGenerator" class="com.projectvision.healthapp.util.ICodeGenerator.NumericCodeGenerator">
    <property name="min" value="${codegenerator.min}" />
    <property name="max" value="${codegenerator.max}" />
  </bean>

  <!-- Unfortunately we have to repeat an instance of this class here because the mvc:message-converters element above
         does not support <ref/> elements so we end up duplicating the bean -->
  <bean id="jacksonHttpMessageConverter"
        class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    <property name="objectMapper" ref="customObjectMapper" />
  </bean>

  <!-- Allow Exceptions to be handled in annotated methods if desired.  Otherwise fallback to the
         'restExceptionResolver' below: -->
  <bean id="annotationMethodHandlerExceptionResolver"
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
    <property name="order" value="0"/>
  </bean>
  <bean id="restExceptionResolver" class="com.projectvision.healthapp.common.errorhandler.RestExceptionHandler">
    <property name="order" value="100"></property>
    <property name="messageConverters">
      <list> <ref bean="jacksonHttpMessageConverter"/> </list>
    </property>
    <!-- errorResolver Bean is inherited from common-app-config.xml imported at the top -->
    <property name="errorResolver" ref="errorResolver" />
  </bean>

  <!-- Include a swagger configuration-->
  <bean name="/applicationSwaggerConfig" class="com.projectvision.healthapp.mainlayer.util.SwaggerConfiguration"/>
</beans>
